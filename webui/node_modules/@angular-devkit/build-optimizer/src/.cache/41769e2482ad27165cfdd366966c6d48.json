{"remainingRequest":"D:\\SOFTWARE\\Programming\\Java\\Projects\\غير منتهية او اختبار\\app\\webui\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\SOFTWARE\\Programming\\Java\\Projects\\غير منتهية او اختبار\\app\\webui\\node_modules\\@ngx-loading-bar\\core\\@ngx-loading-bar\\core.es5.js","dependencies":[{"path":"D:\\SOFTWARE\\Programming\\Java\\Projects\\غير منتهية او اختبار\\app\\webui\\node_modules\\@ngx-loading-bar\\core\\@ngx-loading-bar\\core.es5.js","mtime":1519809503000},{"path":"D:\\SOFTWARE\\Programming\\Java\\Projects\\غير منتهية او اختبار\\app\\webui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\SOFTWARE\\Programming\\Java\\Projects\\غير منتهية او اختبار\\app\\webui\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Injectable, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject as Subject$1 } from 'rxjs/Subject';\nimport { debounceTime as debounceTime$1 } from 'rxjs/operator/debounceTime';\nvar LoadingBarService = /*@__PURE__*/ (function () {\n    function LoadingBarService() {\n        this.progress$ = debounceTime$1.call(new Subject$1());\n        this._pending = new Subject$1();\n        this._pendingRequests = 0;\n        this._value = 0;\n    }\n    /**\n     * @return {?}\n     */\n    LoadingBarService.prototype.start = function () {\n        ++this._pendingRequests;\n        if (this._value === 0) {\n            // Inserts the loading bar element into the dom, and sets it to 2%\n            this.set(2);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    LoadingBarService.prototype.complete = function () {\n        var _this = this;\n        if (this._pendingRequests === 0) {\n            return;\n        }\n        --this._pendingRequests;\n        if (this._pendingRequests === 0 && this._value !== 100) {\n            if (this._value > 0) {\n                this.set(100);\n                // Attempt to aggregate any start/complete calls within 500ms:\n                setTimeout(function () { return _this.set(0); }, 500);\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    LoadingBarService.prototype.ngOnDestroy = function () {\n        this.progress$.complete();\n    };\n    /**\n     * Set the loading bar's width to a certain percent.\n     *\n     * @param {?} n any value between 0 and 100\n     * @return {?}\n     */\n    LoadingBarService.prototype.set = function (n) {\n        var _this = this;\n        if (n === 0 && this._pendingRequests > 0) {\n            n = 2;\n        }\n        this._value = n;\n        this.progress$.next(n);\n        // increment loadingbar to give the illusion that there is always\n        // progress but make sure to cancel the previous timeouts so we don't\n        // have multiple incs running at the same time.\n        clearTimeout(this._incTimeout);\n        if (this._value > 0 && this._value < 100) {\n            this._incTimeout = setTimeout(function () { return _this.increment(); }, 250);\n        }\n    };\n    /**\n     * Increments the loading bar by a random amount\n     * but slows down as it progresses\n     * @return {?}\n     */\n    LoadingBarService.prototype.increment = function () {\n        var /** @type {?} */ rnd = 0;\n        var /** @type {?} */ stat = this._value;\n        if (stat >= 0 && stat < 25) {\n            // Start out between 3 - 6% increments\n            rnd = (Math.random() * (5 - 3 + 1) + 3);\n        }\n        else if (stat >= 25 && stat < 65) {\n            // increment between 0 - 3%\n            rnd = (Math.random() * 3);\n        }\n        else if (stat >= 65 && stat < 90) {\n            // increment between 0 - 2%\n            rnd = (Math.random() * 2);\n        }\n        else if (stat >= 90 && stat < 99) {\n            // finally, increment it .5 %\n            rnd = 0.5;\n        }\n        else {\n            // after 99%, don't increment:\n            rnd = 0;\n        }\n        this.set(this._value + rnd);\n    };\n    return LoadingBarService;\n}());\nvar LoadingBarComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} loader\n     */\n    function LoadingBarComponent(loader) {\n        this.loader = loader;\n        this.includeSpinner = true;\n        this.includeBar = true;\n    }\n    return LoadingBarComponent;\n}());\nvar LoadingBarModule = /*@__PURE__*/ (function () {\n    function LoadingBarModule() {\n    }\n    /**\n     * @return {?}\n     */\n    LoadingBarModule.forRoot = function () {\n        return {\n            ngModule: LoadingBarModule,\n            providers: [LoadingBarService],\n        };\n    };\n    return LoadingBarModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { LoadingBarModule, LoadingBarComponent, LoadingBarService };\n//# sourceMappingURL=core.es5.js.map\n",null]}