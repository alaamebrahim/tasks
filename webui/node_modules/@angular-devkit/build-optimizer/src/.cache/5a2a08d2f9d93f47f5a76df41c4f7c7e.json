{"remainingRequest":"D:\\SOFTWARE\\Programming\\Java\\Projects\\غير منتهية او اختبار\\app\\webui\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\SOFTWARE\\Programming\\Java\\Projects\\غير منتهية او اختبار\\app\\webui\\node_modules\\ng-snotify\\index.js","dependencies":[{"path":"D:\\SOFTWARE\\Programming\\Java\\Projects\\غير منتهية او اختبار\\app\\webui\\node_modules\\ng-snotify\\index.js","mtime":1512815823000},{"path":"D:\\SOFTWARE\\Programming\\Java\\Projects\\غير منتهية او اختبار\\app\\webui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\SOFTWARE\\Programming\\Java\\Projects\\غير منتهية او اختبار\\app\\webui\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Injectable, Input, NgModule, Output, Pipe, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject as Subject$1 } from 'rxjs/Subject';\nimport { PromiseObservable as PromiseObservable$1 } from 'rxjs/observable/PromiseObservable';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Toast style.\n */\nvar SnotifyStyle = {\n    simple: 'simple',\n    success: 'success',\n    error: 'error',\n    warning: 'warning',\n    info: 'info',\n    async: 'async',\n    confirm: 'confirm',\n    prompt: 'prompt'\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Toast main model\n */\nvar SnotifyToast = /*@__PURE__*/ (function () {\n    function SnotifyToast(id, title, body, config) {\n        var _this = this;\n        this.id = id;\n        this.title = title;\n        this.body = body;\n        this.config = config;\n        /**\n         * Emits {SnotifyEvent}\n         */\n        this.eventEmitter = new Subject$1();\n        /**\n         * Holds all subscribers because we need to unsubscribe from all before toast get destroyed\n         */\n        this._eventsHolder = [];\n        if (this.config.type === SnotifyStyle.prompt) {\n            this.value = '';\n        }\n        this.on('hidden', function () {\n            _this._eventsHolder.forEach(function (subscription) {\n                subscription.unsubscribe();\n            });\n        });\n    }\n    /**\n     * Subscribe to toast events\n     * @param {SnotifyEvent} event\n     * @param {(toast: SnotifyToast) => void} action\n     * @returns {this}\n     */\n    /**\n     * Subscribe to toast events\n     * @param {?} event\n     * @param {?} action\n     * @return {?}\n     */\n    SnotifyToast.prototype.on = /**\n     * Subscribe to toast events\n     * @param {?} event\n     * @param {?} action\n     * @return {?}\n     */\n        function (event, action) {\n            var _this = this;\n            this._eventsHolder.push(this.eventEmitter.subscribe(function (e) {\n                if (e === event) {\n                    action(_this);\n                }\n            }));\n            return this;\n        };\n    return SnotifyToast;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Transform arguments to Snotify object\n * @param {?} target\n * @param {?} propertyKey\n * @param {?} descriptor\n * @return {?}\n */\nfunction TransformArgument(target, propertyKey, descriptor) {\n    if (propertyKey === SnotifyStyle.async) {\n        return {\n            value: function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var /** @type {?} */ result;\n                if (args.length === 2) {\n                    result = {\n                        title: null,\n                        body: args[0],\n                        config: null,\n                        action: args[1]\n                    };\n                }\n                else if (args.length === 3) {\n                    if (typeof args[1] === 'string') {\n                        result = {\n                            title: args[1],\n                            body: args[0],\n                            config: null,\n                            action: args[2]\n                        };\n                    }\n                    else {\n                        result = {\n                            title: null,\n                            body: args[0],\n                            config: args[2],\n                            action: args[1]\n                        };\n                    }\n                }\n                else {\n                    result = {\n                        title: args[1],\n                        body: args[0],\n                        config: args[3],\n                        action: args[2]\n                    };\n                }\n                return descriptor.value.apply(this, [/** @type {?} */ (result)]);\n            }\n        };\n    }\n    else {\n        return {\n            value: function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var /** @type {?} */ result;\n                if (args.length === 1) {\n                    result = {\n                        title: null,\n                        body: args[0],\n                        config: null\n                    };\n                }\n                else if (args.length === 3) {\n                    result = {\n                        title: args[1],\n                        body: args[0],\n                        config: args[2]\n                    };\n                }\n                else {\n                    result = (_a = {\n                        title: null,\n                        config: null,\n                        body: args[0]\n                    },\n                        _a[typeof args[1] === 'string' ? 'title' : 'config'] = args[1],\n                        _a);\n                }\n                return descriptor.value.apply(this, [/** @type {?} */ (result)]);\n                var _a;\n            }\n        };\n    }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generates random id\n * @return {?}\n */\nfunction uuid() {\n    return Math.floor(Math.random() * (Date.now() - 1)) + 1;\n}\n/**\n * Simple is object check.\n * @param {?} item {Object<any>}\n * @return {?}\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item) && item !== null);\n}\n/**\n * Deep merge objects.\n * @param {...?} sources {Array<Object<any>>}\n * @return {?}\n */\nfunction mergeDeep() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    var /** @type {?} */ target = {};\n    if (!sources.length) {\n        return target;\n    }\n    while (sources.length > 0) {\n        var /** @type {?} */ source = sources.shift();\n        if (isObject(source)) {\n            for (var /** @type {?} */ key in source) {\n                if (isObject(source[key])) {\n                    target[key] = mergeDeep(target[key], source[key]);\n                }\n                else {\n                    Object.assign(target, (_a = {}, _a[key] = source[key], _a));\n                }\n            }\n        }\n    }\n    return target;\n    var _a;\n}\n/**\n * @param {?} start\n * @param {?} duration\n * @param {?} callback\n * @return {?}\n */\nvar __assign$1 = (undefined && undefined.__assign) || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n    }\n    return t;\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Defines toast style depending on method name\n * @param {?} target\n * @param {?} propertyKey\n * @param {?} descriptor\n * @return {?}\n */\nfunction SetToastType(target, propertyKey, descriptor) {\n    return {\n        value: function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            ((args[0])).config = __assign$1({}, ((args[0])).config, { type: propertyKey });\n            return descriptor.value.apply(this, args);\n        }\n    };\n}\nvar __assign = (undefined && undefined.__assign) || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n    }\n    return t;\n};\nimport { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * SnotifyService - create, remove, config toasts\n */\nvar SnotifyService = /*@__PURE__*/ (function () {\n    function SnotifyService(config) {\n        this.config = config;\n        this.emitter = new Subject$1();\n        this.toastChanged = new Subject$1();\n        this.toastDeleted = new Subject$1();\n        this.notifications = [];\n    }\n    /**\n     * emit changes in notifications array\n     * @return {?}\n     */\n    SnotifyService.prototype.emit = /**\n     * emit changes in notifications array\n     * @return {?}\n     */\n        function () {\n            this.emitter.next(this.notifications.slice());\n        };\n    /**\n     * returns SnotifyToast object\n     * @param id {Number}\n     * @return {SnotifyToast|undefined}\n     */\n    /**\n     * returns SnotifyToast object\n     * @param {?} id {Number}\n     * @return {?}\n     */\n    SnotifyService.prototype.get = /**\n     * returns SnotifyToast object\n     * @param {?} id {Number}\n     * @return {?}\n     */\n        function (id) {\n            return this.notifications.find(function (toast) { return toast.id === id; });\n        };\n    /**\n     * add SnotifyToast to notifications array\n     * @param {?} toast {SnotifyToast}\n     * @return {?}\n     */\n    SnotifyService.prototype.add = /**\n     * add SnotifyToast to notifications array\n     * @param {?} toast {SnotifyToast}\n     * @return {?}\n     */\n        function (toast) {\n            if (this.config.global.newOnTop) {\n                this.notifications.unshift(toast);\n            }\n            else {\n                this.notifications.push(toast);\n            }\n            this.emit();\n        };\n    /**\n     * If ID passed, emits toast animation remove, if ID & REMOVE passed, removes toast from notifications array\n     * @param id {number}\n     * @param remove {boolean}\n     */\n    /**\n     * If ID passed, emits toast animation remove, if ID & REMOVE passed, removes toast from notifications array\n     * @param {?=} id {number}\n     * @param {?=} remove {boolean}\n     * @return {?}\n     */\n    SnotifyService.prototype.remove = /**\n     * If ID passed, emits toast animation remove, if ID & REMOVE passed, removes toast from notifications array\n     * @param {?=} id {number}\n     * @param {?=} remove {boolean}\n     * @return {?}\n     */\n        function (id, remove) {\n            if (!id) {\n                return this.clear();\n            }\n            else if (remove) {\n                this.notifications = this.notifications.filter(function (toast) { return toast.id !== id; });\n                return this.emit();\n            }\n            this.toastDeleted.next(id);\n        };\n    /**\n     * Clear notifications array\n     */\n    /**\n     * Clear notifications array\n     * @return {?}\n     */\n    SnotifyService.prototype.clear = /**\n     * Clear notifications array\n     * @return {?}\n     */\n        function () {\n            this.notifications = [];\n            this.emit();\n        };\n    /**\n     * Creates toast and add it to array, returns toast id\n     * @param snotify {Snotify}\n     * @return {number}\n     */\n    /**\n     * Creates toast and add it to array, returns toast id\n     * @param {?} snotify {Snotify}\n     * @return {?}\n     */\n    SnotifyService.prototype.create = /**\n     * Creates toast and add it to array, returns toast id\n     * @param {?} snotify {Snotify}\n     * @return {?}\n     */\n        function (snotify) {\n            var /** @type {?} */ config = mergeDeep(this.config.toast, this.config.type[snotify.config.type], snotify.config);\n            var /** @type {?} */ toast = new SnotifyToast(uuid(), snotify.title, snotify.body, config);\n            this.add(toast);\n            return toast;\n        };\n    /**\n     * @param {?} defaults\n     * @return {?}\n     */\n    SnotifyService.prototype.setDefaults = /**\n     * @param {?} defaults\n     * @return {?}\n     */\n        function (defaults) {\n            return this.config = /** @type {?} */ (mergeDeep(this.config, defaults));\n        };\n    /**\n     * Transform toast arguments into {Snotify} object\n     */\n    /**\n     * Transform toast arguments into {Snotify} object\n     * @param {?} args\n     * @return {?}\n     */\n    SnotifyService.prototype.simple = /**\n     * Transform toast arguments into {Snotify} object\n     * @param {?} args\n     * @return {?}\n     */\n        function (args) {\n            return this.create(args);\n        };\n    /**\n     * Transform toast arguments into {Snotify} object\n     */\n    /**\n     * Transform toast arguments into {Snotify} object\n     * @param {?} args\n     * @return {?}\n     */\n    SnotifyService.prototype.success = /**\n     * Transform toast arguments into {Snotify} object\n     * @param {?} args\n     * @return {?}\n     */\n        function (args) {\n            return this.create(args);\n        };\n    /**\n     * Transform toast arguments into {Snotify} object\n     */\n    /**\n     * Transform toast arguments into {Snotify} object\n     * @param {?} args\n     * @return {?}\n     */\n    SnotifyService.prototype.error = /**\n     * Transform toast arguments into {Snotify} object\n     * @param {?} args\n     * @return {?}\n     */\n        function (args) {\n            return this.create(args);\n        };\n    /**\n     * Transform toast arguments into {Snotify} object\n     */\n    /**\n     * Transform toast arguments into {Snotify} object\n     * @param {?} args\n     * @return {?}\n     */\n    SnotifyService.prototype.info = /**\n     * Transform toast arguments into {Snotify} object\n     * @param {?} args\n     * @return {?}\n     */\n        function (args) {\n            return this.create(args);\n        };\n    /**\n     * Transform toast arguments into {Snotify} object\n     */\n    /**\n     * Transform toast arguments into {Snotify} object\n     * @param {?} args\n     * @return {?}\n     */\n    SnotifyService.prototype.warning = /**\n     * Transform toast arguments into {Snotify} object\n     * @param {?} args\n     * @return {?}\n     */\n        function (args) {\n            return this.create(args);\n        };\n    /**\n     * Transform toast arguments into {Snotify} object\n     */\n    /**\n     * Transform toast arguments into {Snotify} object\n     * @param {?} args\n     * @return {?}\n     */\n    SnotifyService.prototype.confirm = /**\n     * Transform toast arguments into {Snotify} object\n     * @param {?} args\n     * @return {?}\n     */\n        function (args) {\n            return this.create(args);\n        };\n    /**\n     * Transform toast arguments into {Snotify} object\n     */\n    /**\n     * Transform toast arguments into {Snotify} object\n     * @param {?} args\n     * @return {?}\n     */\n    SnotifyService.prototype.prompt = /**\n     * Transform toast arguments into {Snotify} object\n     * @param {?} args\n     * @return {?}\n     */\n        function (args) {\n            return this.create(args);\n        };\n    /**\n     * Transform toast arguments into {Snotify} object\n     */\n    /**\n     * Transform toast arguments into {Snotify} object\n     * @param {?} args\n     * @return {?}\n     */\n    SnotifyService.prototype.async = /**\n     * Transform toast arguments into {Snotify} object\n     * @param {?} args\n     * @return {?}\n     */\n        function (args) {\n            var _this = this;\n            var /** @type {?} */ async;\n            if (args.action instanceof Promise) {\n                async = PromiseObservable$1.create(args.action);\n            }\n            else {\n                async = args.action;\n            }\n            var /** @type {?} */ toast = this.create(args);\n            toast.on('mounted', function () {\n                var /** @type {?} */ subscription = async.subscribe(function (next) {\n                    _this.mergeToast(toast, next);\n                }, function (error) {\n                    _this.mergeToast(toast, error, SnotifyStyle.error);\n                    subscription.unsubscribe();\n                }, function () {\n                    _this.mergeToast(toast, {}, SnotifyStyle.success);\n                    subscription.unsubscribe();\n                });\n            });\n            return toast;\n        };\n    /**\n     * @param {?} toast\n     * @param {?} next\n     * @param {?=} type\n     * @return {?}\n     */\n    SnotifyService.prototype.mergeToast = /**\n     * @param {?} toast\n     * @param {?} next\n     * @param {?=} type\n     * @return {?}\n     */\n        function (toast, next, type) {\n            if (next.body) {\n                toast.body = next.body;\n            }\n            if (next.title) {\n                toast.title = next.title;\n            }\n            if (type) {\n                toast.config = mergeDeep(toast.config, this.config.global, this.config.toast[type], { type: type }, next.config);\n            }\n            else {\n                toast.config = mergeDeep(toast.config, next.config);\n            }\n            if (next.html) {\n                toast.config.html = next.html;\n            }\n            this.emit();\n            this.toastChanged.next(toast);\n        };\n    /**\n     * Creates empty toast with html string inside\n     * @param {string | SafeHtml} html\n     * @param {SnotifyToastConfig} config\n     * @returns {number}\n     */\n    /**\n     * Creates empty toast with html string inside\n     * @param {?} html\n     * @param {?=} config\n     * @return {?}\n     */\n    SnotifyService.prototype.html = /**\n     * Creates empty toast with html string inside\n     * @param {?} html\n     * @param {?=} config\n     * @return {?}\n     */\n        function (html, config) {\n            return this.create({\n                title: null,\n                body: null,\n                config: __assign({}, config, { html: html })\n            });\n        };\n    __decorate([\n        TransformArgument\n        /**\n         * Determines current toast type and collects default configuration\n         */\n        ,\n        SetToastType,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", SnotifyToast)\n    ], SnotifyService.prototype, \"simple\", null);\n    __decorate([\n        TransformArgument\n        /**\n         * Determines current toast type and collects default configuration\n         */\n        ,\n        SetToastType,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", SnotifyToast)\n    ], SnotifyService.prototype, \"success\", null);\n    __decorate([\n        TransformArgument\n        /**\n         * Determines current toast type and collects default configuration\n         */\n        ,\n        SetToastType,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", SnotifyToast)\n    ], SnotifyService.prototype, \"error\", null);\n    __decorate([\n        TransformArgument\n        /**\n         * Determines current toast type and collects default configuration\n         */\n        ,\n        SetToastType,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", SnotifyToast)\n    ], SnotifyService.prototype, \"info\", null);\n    __decorate([\n        TransformArgument\n        /**\n         * Determines current toast type and collects default configuration\n         */\n        ,\n        SetToastType,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", SnotifyToast)\n    ], SnotifyService.prototype, \"warning\", null);\n    __decorate([\n        TransformArgument\n        /**\n         * Determines current toast type and collects default configuration\n         */\n        ,\n        SetToastType,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", SnotifyToast)\n    ], SnotifyService.prototype, \"confirm\", null);\n    __decorate([\n        TransformArgument\n        /**\n         * Determines current toast type and collects default configuration\n         */\n        ,\n        SetToastType,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", SnotifyToast)\n    ], SnotifyService.prototype, \"prompt\", null);\n    __decorate([\n        TransformArgument\n        /**\n         * Determines current toast type and collects default configuration\n         */\n        ,\n        SetToastType,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", SnotifyToast)\n    ], SnotifyService.prototype, \"async\", null);\n    return SnotifyService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Toast position\n */\nvar SnotifyPosition = /*@__PURE__*/ (function () {\n    function SnotifyPosition() {\n    }\n    SnotifyPosition.leftTop = 'leftTop';\n    SnotifyPosition.leftCenter = 'leftCenter';\n    SnotifyPosition.leftBottom = 'leftBottom';\n    SnotifyPosition.rightTop = 'rightTop';\n    SnotifyPosition.rightCenter = 'rightCenter';\n    SnotifyPosition.rightBottom = 'rightBottom';\n    SnotifyPosition.centerTop = 'centerTop';\n    SnotifyPosition.centerCenter = 'centerCenter';\n    SnotifyPosition.centerBottom = 'centerBottom';\n    return SnotifyPosition;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar SnotifyComponent = /*@__PURE__*/ (function () {\n    function SnotifyComponent(service) {\n        this.service = service;\n        /**\n         * Backdrop Opacity\n         */\n        this.backdrop = -1;\n    }\n    /**\n     * Init base options. Subscribe to options, lifecycle change\n     */\n    /**\n     * Init base options. Subscribe to options, lifecycle change\n     * @return {?}\n     */\n    SnotifyComponent.prototype.ngOnInit = /**\n     * Init base options. Subscribe to options, lifecycle change\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.emitter = this.service.emitter.subscribe(function (toasts) {\n                if (_this.service.config.global.newOnTop) {\n                    _this.dockSize_a = -_this.service.config.global.maxOnScreen;\n                    _this.dockSize_b = undefined;\n                    _this.blockSize_a = -_this.service.config.global.maxAtPosition;\n                    _this.blockSize_b = undefined;\n                    _this.withBackdrop = toasts.filter(function (toast) { return toast.config.backdrop >= 0; });\n                }\n                else {\n                    _this.dockSize_a = 0;\n                    _this.dockSize_b = _this.service.config.global.maxOnScreen;\n                    _this.blockSize_a = 0;\n                    _this.blockSize_b = _this.service.config.global.maxAtPosition;\n                    _this.withBackdrop = toasts.filter(function (toast) { return toast.config.backdrop >= 0; }).reverse();\n                }\n                _this.notifications = _this.splitToasts(toasts.slice(_this.dockSize_a, _this.dockSize_b));\n                _this.stateChanged('mounted');\n            });\n        };\n    // TODO: fix backdrop if more than one toast called in a row\n    /**\n     * Changes the backdrop opacity\n     * @param {SnotifyEvent} event\n     */\n    /**\n     * Changes the backdrop opacity\n     * @param {?} event\n     * @return {?}\n     */\n    SnotifyComponent.prototype.stateChanged = /**\n     * Changes the backdrop opacity\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (!this.withBackdrop.length) {\n                return;\n            }\n            switch (event) {\n                case 'mounted':\n                    if (this.backdrop < 0) {\n                        this.backdrop = 0;\n                    }\n                    break;\n                case 'beforeShow':\n                    this.backdrop = this.withBackdrop[this.withBackdrop.length - 1].config.backdrop;\n                    break;\n                case 'beforeHide':\n                    if (this.withBackdrop.length === 1) {\n                        this.backdrop = 0;\n                    }\n                    break;\n                case 'hidden':\n                    if (this.withBackdrop.length === 1) {\n                        this.backdrop = -1;\n                    }\n                    break;\n            }\n        };\n    /**\n     * Split toasts toasts into different objects\n     * @param {SnotifyToast[]} toasts\n     * @returns {SnotifyNotifications}\n     */\n    /**\n     * Split toasts toasts into different objects\n     * @param {?} toasts\n     * @return {?}\n     */\n    SnotifyComponent.prototype.splitToasts = /**\n     * Split toasts toasts into different objects\n     * @param {?} toasts\n     * @return {?}\n     */\n        function (toasts) {\n            var /** @type {?} */ result = {};\n            for (var /** @type {?} */ property in SnotifyPosition) {\n                if (SnotifyPosition.hasOwnProperty(property)) {\n                    result[SnotifyPosition[property]] = [];\n                }\n            }\n            toasts.forEach(function (toast) {\n                result[(toast.config.position)].push(toast);\n            });\n            return result;\n        };\n    /**\n     * Unsubscribe subscriptions\n     */\n    /**\n     * Unsubscribe subscriptions\n     * @return {?}\n     */\n    SnotifyComponent.prototype.ngOnDestroy = /**\n     * Unsubscribe subscriptions\n     * @return {?}\n     */\n        function () {\n            this.emitter.unsubscribe();\n        };\n    return SnotifyComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ToastComponent = /*@__PURE__*/ (function () {\n    function ToastComponent(service) {\n        this.service = service;\n        this.stateChanged = new EventEmitter();\n        /**\n         * Toast state\n         */\n        this.state = {\n            paused: false,\n            progress: 0,\n            animation: '',\n            isDestroying: false,\n            promptType: SnotifyStyle.prompt\n        };\n    }\n    // Lifecycles\n    /**\n     * Init base options. Subscribe to toast changed, toast deleted\n     */\n    /**\n     * Init base options. Subscribe to toast changed, toast deleted\n     * @return {?}\n     */\n    ToastComponent.prototype.ngOnInit = /**\n     * Init base options. Subscribe to toast changed, toast deleted\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.toastChangedSubscription = this.service.toastChanged.subscribe(function (toast) {\n                if (_this.toast.id === toast.id) {\n                    _this.initToast();\n                }\n            });\n            this.toastDeletedSubscription = this.service.toastDeleted.subscribe(function (id) {\n                if (_this.toast.id === id) {\n                    _this.onRemove();\n                }\n            });\n            if (!this.toast.config.timeout) {\n                this.toast.config.showProgressBar = false;\n            }\n            this.toast.eventEmitter.next('mounted');\n            this.state.animation = 'snotifyToast--in';\n        };\n    /**\n     * @return {?}\n     */\n    ToastComponent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            setTimeout(function () {\n                _this.stateChanged.emit('beforeShow');\n                _this.toast.eventEmitter.next('beforeShow');\n                _this.state.animation = _this.toast.config.animation.enter;\n            }, this.service.config.toast.animation.time / 5); // time to show toast push animation (snotifyToast--in)\n        };\n    /**\n     * Unsubscribe subscriptions\n     */\n    /**\n     * Unsubscribe subscriptions\n     * @return {?}\n     */\n    ToastComponent.prototype.ngOnDestroy = /**\n     * Unsubscribe subscriptions\n     * @return {?}\n     */\n        function () {\n            cancelAnimationFrame(this.animationFrame);\n            this.toast.eventEmitter.next('destroyed');\n            this.toastChangedSubscription.unsubscribe();\n            this.toastDeletedSubscription.unsubscribe();\n        };\n    /*\n    Event hooks\n     */\n    /**\n     * Trigger OnClick lifecycle\n     */\n    /**\n     * Trigger OnClick lifecycle\n     * @return {?}\n     */\n    ToastComponent.prototype.onClick = /**\n     * Trigger OnClick lifecycle\n     * @return {?}\n     */\n        function () {\n            this.toast.eventEmitter.next('click');\n            if (this.toast.config.closeOnClick) {\n                this.service.remove(this.toast.id);\n            }\n        };\n    /**\n     * Trigger beforeDestroy lifecycle. Removes toast\n     */\n    /**\n     * Trigger beforeDestroy lifecycle. Removes toast\n     * @return {?}\n     */\n    ToastComponent.prototype.onRemove = /**\n     * Trigger beforeDestroy lifecycle. Removes toast\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.state.isDestroying = true;\n            this.stateChanged.emit('beforeHide');\n            this.toast.eventEmitter.next('beforeHide');\n            this.state.animation = this.toast.config.animation.exit;\n            setTimeout(function () {\n                _this.stateChanged.emit('hidden');\n                _this.state.animation = 'snotifyToast--out';\n                _this.toast.eventEmitter.next('hidden');\n                setTimeout(function () { return _this.service.remove(_this.toast.id, true); }, _this.toast.config.animation.time / 2);\n            }, this.toast.config.animation.time / 2);\n        };\n    /**\n     * Trigger onHoverEnter lifecycle\n     */\n    /**\n     * Trigger onHoverEnter lifecycle\n     * @return {?}\n     */\n    ToastComponent.prototype.onMouseEnter = /**\n     * Trigger onHoverEnter lifecycle\n     * @return {?}\n     */\n        function () {\n            this.toast.eventEmitter.next('mouseenter');\n            if (this.toast.config.pauseOnHover) {\n                this.state.paused = true;\n            }\n        };\n    /**\n     * Trigger onHoverLeave lifecycle\n     */\n    /**\n     * Trigger onHoverLeave lifecycle\n     * @return {?}\n     */\n    ToastComponent.prototype.onMouseLeave = /**\n     * Trigger onHoverLeave lifecycle\n     * @return {?}\n     */\n        function () {\n            if (this.toast.config.pauseOnHover && this.toast.config.timeout) {\n                this.state.paused = false;\n                this.startTimeout(this.toast.config.timeout * this.state.progress);\n            }\n            this.toast.eventEmitter.next('mouseleave');\n        };\n    /**\n     * Remove toast completely after animation\n     */\n    /**\n     * Remove toast completely after animation\n     * @return {?}\n     */\n    ToastComponent.prototype.onExitTransitionEnd = /**\n     * Remove toast completely after animation\n     * @return {?}\n     */\n        function () {\n            if (this.state.isDestroying) {\n                return;\n            }\n            this.initToast();\n            this.toast.eventEmitter.next('shown');\n        };\n    /*\n     Common\n     */\n    /**\n     * Initialize base toast config\n     *\n     */\n    /**\n     * Initialize base toast config\n     *\n     * @return {?}\n     */\n    ToastComponent.prototype.initToast = /**\n     * Initialize base toast config\n     *\n     * @return {?}\n     */\n        function () {\n            if (this.toast.config.timeout > 0) {\n                this.startTimeout(0);\n            }\n        };\n    /**\n     * Start progress bar\n     * @param startTime {number}\n     * @default 0\n     */\n    /**\n     * Start progress bar\n     * \\@default 0\n     * @param {?=} startTime {number}\n     * @return {?}\n     */\n    ToastComponent.prototype.startTimeout = /**\n     * Start progress bar\n     * \\@default 0\n     * @param {?=} startTime {number}\n     * @return {?}\n     */\n        function (startTime) {\n            var _this = this;\n            if (startTime === void 0) {\n                startTime = 0;\n            }\n            var /** @type {?} */ start = performance.now();\n            var /** @type {?} */ calculate = function () {\n                _this.animationFrame = requestAnimationFrame(function (timestamp) {\n                    var /** @type {?} */ runtime = timestamp + startTime - start;\n                    var /** @type {?} */ progress = Math.min(runtime / _this.toast.config.timeout, 1);\n                    if (_this.state.paused) {\n                        cancelAnimationFrame(_this.animationFrame);\n                    }\n                    else if (runtime < _this.toast.config.timeout) {\n                        _this.state.progress = progress;\n                        calculate();\n                    }\n                    else {\n                        _this.state.progress = 1;\n                        cancelAnimationFrame(_this.animationFrame);\n                        _this.service.remove(_this.toast.id);\n                    }\n                });\n            };\n            calculate();\n        };\n    return ToastComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar TruncatePipe = /*@__PURE__*/ (function () {\n    function TruncatePipe() {\n    }\n    /**\n     * @param {?} value\n     * @param {...?} args\n     * @return {?}\n     */\n    TruncatePipe.prototype.transform = /**\n     * @param {?} value\n     * @param {...?} args\n     * @return {?}\n     */\n        function (value) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            var /** @type {?} */ limit = 40;\n            var /** @type {?} */ trail = '...';\n            if (args.length > 0) {\n                limit = args.length > 0 ? parseInt(args[0], 10) : limit;\n                trail = args.length > 1 ? args[1] : trail;\n            }\n            return value.length > limit ? value.substring(0, limit) + trail : value;\n        };\n    return TruncatePipe;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ButtonsComponent = /*@__PURE__*/ (function () {\n    function ButtonsComponent(service) {\n        this.service = service;\n    }\n    /**\n     * remove toast\n     */\n    /**\n     * remove toast\n     * @return {?}\n     */\n    ButtonsComponent.prototype.remove = /**\n     * remove toast\n     * @return {?}\n     */\n        function () {\n            this.service.remove(this.toast.id);\n        };\n    return ButtonsComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar PromptComponent = /*@__PURE__*/ (function () {\n    function PromptComponent() {\n        /**\n         * Is PROMPT focused\n         */\n        this.isPromptFocused = false;\n    }\n    return PromptComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar KeysPipe = /*@__PURE__*/ (function () {\n    function KeysPipe() {\n    }\n    /**\n     * @param {?} value\n     * @param {?=} args\n     * @return {?}\n     */\n    KeysPipe.prototype.transform = /**\n     * @param {?} value\n     * @param {?=} args\n     * @return {?}\n     */\n        function (value, args) {\n            if (args === void 0) {\n                args = null;\n            }\n            if (!value) {\n                return value;\n            }\n            return Object.keys(value);\n        };\n    return KeysPipe;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Snotify default configuration object\n */\nvar ToastDefaults = {\n    global: {\n        newOnTop: true,\n        maxOnScreen: 8,\n        maxAtPosition: 8\n    },\n    toast: {\n        type: SnotifyStyle.simple,\n        showProgressBar: true,\n        timeout: 2000,\n        closeOnClick: true,\n        pauseOnHover: true,\n        bodyMaxLength: 150,\n        titleMaxLength: 16,\n        backdrop: -1,\n        icon: null,\n        iconClass: null,\n        html: null,\n        position: SnotifyPosition.rightBottom,\n        animation: { enter: 'fadeIn', exit: 'fadeOut', time: 400 }\n    },\n    type: (_a = {},\n        _a[SnotifyStyle.prompt] = {\n            timeout: 0,\n            closeOnClick: false,\n            buttons: [\n                { text: 'Ok', action: null, bold: true },\n                { text: 'Cancel', action: null, bold: false },\n            ],\n            placeholder: 'Enter answer here...',\n            type: SnotifyStyle.prompt,\n        },\n        _a[SnotifyStyle.confirm] = {\n            timeout: 0,\n            closeOnClick: false,\n            buttons: [\n                { text: 'Ok', action: null, bold: true },\n                { text: 'Cancel', action: null, bold: false },\n            ],\n            type: SnotifyStyle.confirm,\n        },\n        _a[SnotifyStyle.simple] = {\n            type: SnotifyStyle.simple\n        },\n        _a[SnotifyStyle.success] = {\n            type: SnotifyStyle.success\n        },\n        _a[SnotifyStyle.error] = {\n            type: SnotifyStyle.error\n        },\n        _a[SnotifyStyle.warning] = {\n            type: SnotifyStyle.warning\n        },\n        _a[SnotifyStyle.info] = {\n            type: SnotifyStyle.info\n        },\n        _a[SnotifyStyle.async] = {\n            pauseOnHover: false,\n            closeOnClick: false,\n            timeout: 0,\n            showProgressBar: false,\n            type: SnotifyStyle.async\n        },\n        _a)\n};\nvar _a;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar SnotifyModule = /*@__PURE__*/ (function () {\n    function SnotifyModule() {\n    }\n    /**\n     * @return {?}\n     */\n    SnotifyModule.forRoot = /**\n     * @return {?}\n     */\n        function () {\n            return {\n                ngModule: SnotifyModule,\n                providers: [SnotifyService]\n            };\n        };\n    return SnotifyModule;\n}());\nexport { SnotifyModule, SnotifyComponent, SnotifyService, SnotifyPosition, SnotifyToast, ToastComponent, TruncatePipe, KeysPipe, ButtonsComponent, PromptComponent, ToastDefaults };\n",null]}