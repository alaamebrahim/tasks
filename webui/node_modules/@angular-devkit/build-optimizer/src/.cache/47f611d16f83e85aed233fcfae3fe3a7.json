{"remainingRequest":"D:\\SOFTWARE\\Programming\\Java\\Projects\\غير منتهية او اختبار\\app\\webui\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\SOFTWARE\\Programming\\Java\\Projects\\غير منتهية او اختبار\\app\\webui\\node_modules\\@nebular\\theme\\components\\popover\\helpers\\trigger.helper.js","dependencies":[{"path":"D:\\SOFTWARE\\Programming\\Java\\Projects\\غير منتهية او اختبار\\app\\webui\\node_modules\\@nebular\\theme\\components\\popover\\helpers\\trigger.helper.js","mtime":1519306628000},{"path":"D:\\SOFTWARE\\Programming\\Java\\Projects\\غير منتهية او اختبار\\app\\webui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\SOFTWARE\\Programming\\Java\\Projects\\غير منتهية او اختبار\\app\\webui\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { fromEvent as observableFromEvent } from 'rxjs/observable/fromEvent';\r\nimport { empty as observableEmpty } from 'rxjs/observable/empty';\r\nimport { NbPopoverMode } from './model';\r\nimport { filter } from 'rxjs/operators/filter';\r\nimport { delay } from 'rxjs/operators/delay';\r\nimport { takeWhile } from 'rxjs/operators/takeWhile';\r\nimport { debounceTime } from 'rxjs/operators/debounceTime';\r\nimport { switchMap } from 'rxjs/operators/switchMap';\r\nimport { repeat } from 'rxjs/operators/repeat';\r\nimport { takeUntil } from 'rxjs/operators/takeUntil';\r\n/**\r\n * Describes popover triggers strategies based on popover {@link NbPopoverMode} mode.\r\n * */\r\nvar NB_TRIGGERS = (_a = {},\r\n    /**\r\n     * Creates toggle and close events streams based on popover {@link NbPopoverMode#CLICK} mode.\r\n     * Fires toggle event when click was performed on the host element.\r\n     * Fires close event when click was performed on the document but\r\n     * not on the host or container or popover container isn't rendered yet.\r\n     *\r\n     * @param host {HTMLElement} popover host element.\r\n     * @param getContainer {Function} popover container getter.\r\n     *\r\n     * @return {NbPopoverTrigger} open and close events streams.\r\n     * */\r\n    _a[NbPopoverMode.CLICK] = /**\r\n       * Creates toggle and close events streams based on popover {@link NbPopoverMode#CLICK} mode.\r\n       * Fires toggle event when click was performed on the host element.\r\n       * Fires close event when click was performed on the document but\r\n       * not on the host or container or popover container isn't rendered yet.\r\n       *\r\n       * @param host {HTMLElement} popover host element.\r\n       * @param getContainer {Function} popover container getter.\r\n       *\r\n       * @return {NbPopoverTrigger} open and close events streams.\r\n       * */\r\n        function (host, getContainer) {\r\n            return {\r\n                open: observableEmpty(),\r\n                close: observableFromEvent(document, 'click')\r\n                    .pipe(filter(function (event) {\r\n                    return !host.contains(event.target)\r\n                        && getContainer()\r\n                        && !getContainer().location.nativeElement.contains(event.target);\r\n                })),\r\n                toggle: observableFromEvent(host, 'click'),\r\n            };\r\n        },\r\n    /**\r\n     * Creates open and close events streams based on popover {@link NbPopoverMode#HOVER} mode.\r\n     * Fires open event when mouse hovers over the host element and stay over at least 100 milliseconds.\r\n     * Fires close event when mouse leaves the host element and stops out of the host and popover container.\r\n     *\r\n     * @param host {HTMLElement} popover host element.\r\n     * @param getContainer {Function} popover container getter.\r\n     *\r\n     * @return {NbPopoverTrigger} open and close events streams.\r\n     * */\r\n    _a[NbPopoverMode.HOVER] = /**\r\n       * Creates open and close events streams based on popover {@link NbPopoverMode#HOVER} mode.\r\n       * Fires open event when mouse hovers over the host element and stay over at least 100 milliseconds.\r\n       * Fires close event when mouse leaves the host element and stops out of the host and popover container.\r\n       *\r\n       * @param host {HTMLElement} popover host element.\r\n       * @param getContainer {Function} popover container getter.\r\n       *\r\n       * @return {NbPopoverTrigger} open and close events streams.\r\n       * */\r\n        function (host, getContainer) {\r\n            return {\r\n                open: observableFromEvent(host, 'mouseenter')\r\n                    .pipe(delay(100), takeUntil(observableFromEvent(host, 'mouseleave')), repeat()),\r\n                close: observableFromEvent(host, 'mouseleave')\r\n                    .pipe(switchMap(function () {\r\n                    return observableFromEvent(document, 'mousemove')\r\n                        .pipe(debounceTime(100), takeWhile(function () { return !!getContainer(); }), filter(function (event) {\r\n                        return !host.contains(event.target)\r\n                            && !getContainer().location.nativeElement.contains(event.target);\r\n                    }));\r\n                })),\r\n                toggle: observableEmpty(),\r\n            };\r\n        },\r\n    /**\r\n     * Creates open and close events streams based on popover {@link NbPopoverMode#HOVER} mode.\r\n     * Fires open event when mouse hovers over the host element and stay over at least 100 milliseconds.\r\n     * Fires close event when mouse leaves the host element.\r\n     *\r\n     * @param host {HTMLElement} popover host element.\r\n     *\r\n     * @return {NbPopoverTrigger} open and close events streams.\r\n     * */\r\n    _a[NbPopoverMode.HINT] = /**\r\n       * Creates open and close events streams based on popover {@link NbPopoverMode#HOVER} mode.\r\n       * Fires open event when mouse hovers over the host element and stay over at least 100 milliseconds.\r\n       * Fires close event when mouse leaves the host element.\r\n       *\r\n       * @param host {HTMLElement} popover host element.\r\n       *\r\n       * @return {NbPopoverTrigger} open and close events streams.\r\n       * */\r\n        function (host) {\r\n            return {\r\n                open: observableFromEvent(host, 'mouseenter')\r\n                    .pipe(delay(100), takeUntil(observableFromEvent(host, 'mouseleave')), repeat()),\r\n                close: observableFromEvent(host, 'mouseleave'),\r\n                toggle: observableEmpty(),\r\n            };\r\n        },\r\n    _a);\r\nvar NbTriggerHelper = /*@__PURE__*/ (function () {\r\n    function NbTriggerHelper() {\r\n    }\r\n    /**\r\n     * Creates open and close events streams based on popover {@link NbPopoverMode} mode.\r\n     *\r\n     * @param host {HTMLElement} popover host element.\r\n     * @param getContainer {Function} popover container getter.\r\n     * Getter required because listen can be called when container isn't initialized.\r\n     * @param mode {NbPopoverMode} describes container triggering strategy.\r\n     *\r\n     * @return {NbPopoverTrigger} open and close events streams.\r\n     * */\r\n    /**\r\n       * Creates open and close events streams based on popover {@link NbPopoverMode} mode.\r\n       *\r\n       * @param host {HTMLElement} popover host element.\r\n       * @param getContainer {Function} popover container getter.\r\n       * Getter required because listen can be called when container isn't initialized.\r\n       * @param mode {NbPopoverMode} describes container triggering strategy.\r\n       *\r\n       * @return {NbPopoverTrigger} open and close events streams.\r\n       * */\r\n    NbTriggerHelper.createTrigger = /**\r\n       * Creates open and close events streams based on popover {@link NbPopoverMode} mode.\r\n       *\r\n       * @param host {HTMLElement} popover host element.\r\n       * @param getContainer {Function} popover container getter.\r\n       * Getter required because listen can be called when container isn't initialized.\r\n       * @param mode {NbPopoverMode} describes container triggering strategy.\r\n       *\r\n       * @return {NbPopoverTrigger} open and close events streams.\r\n       * */\r\n        function (host, getContainer, mode) {\r\n            var createTrigger = NB_TRIGGERS[mode];\r\n            return createTrigger.call(NB_TRIGGERS, host, getContainer);\r\n        };\r\n    return NbTriggerHelper;\r\n}());\r\nexport { NbTriggerHelper };\r\nvar _a;\r\n//# sourceMappingURL=trigger.helper.js.map \r\n",null]}