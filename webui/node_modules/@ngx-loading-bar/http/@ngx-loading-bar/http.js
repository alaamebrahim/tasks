import { Injectable, NgModule } from '@angular/core';
import { ConnectionBackend, Http, HttpModule, RequestOptions, XHRBackend } from '@angular/http';
import { LoadingBarModule, LoadingBarService } from '@ngx-loading-bar/core';
import { _finally as _finally$1 } from 'rxjs/operator/finally';

class LoadingBarHttp extends Http {
    /**
     * @param {?} _backend
     * @param {?} _defaultOptions
     * @param {?} loadingBar
     */
    constructor(_backend, _defaultOptions, loadingBar) {
        super(_backend, _defaultOptions);
        this.loadingBar = loadingBar;
    }
    /**
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    request(url, options) {
        let /** @type {?} */ headers = options && options.headers;
        if (!headers && url && ((url)).headers) {
            headers = ((url)).headers;
        }
        if (headers && headers.has('ignoreLoadingBar')) {
            headers.delete('ignoreLoadingBar');
            return super.request(url, options);
        }
        const /** @type {?} */ response$ = super.request(url, options);
        if (options && options.ignoreLoadingBar === true) {
            return response$;
        }
        let /** @type {?} */ started = false;
        const /** @type {?} */ responseSubscribe = response$.subscribe.bind(response$);
        response$.subscribe = (...args) => {
            this.loadingBar.start();
            started = true;
            return responseSubscribe(...args);
        };
        return _finally$1.call(response$, () => started && this.loadingBar.complete());
    }
}
LoadingBarHttp.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
LoadingBarHttp.ctorParameters = () => [
    { type: ConnectionBackend, },
    { type: RequestOptions, },
    { type: LoadingBarService, },
];

/**
 * @param {?} xhrBackend
 * @param {?} requestOptions
 * @param {?} loadingBarService
 * @return {?}
 */
function httpFactory(xhrBackend, requestOptions, loadingBarService) {
    return new LoadingBarHttp(xhrBackend, requestOptions, loadingBarService);
}
class LoadingBarHttpModule {
}
LoadingBarHttpModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    HttpModule,
                    LoadingBarModule.forRoot(),
                ],
                exports: [
                    HttpModule,
                    LoadingBarModule,
                ],
                providers: [
                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions, LoadingBarService] },
                ],
            },] },
];
/**
 * @nocollapse
 */
LoadingBarHttpModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { LoadingBarHttpModule, LoadingBarHttp, httpFactory as Éµa };
//# sourceMappingURL=http.js.map
