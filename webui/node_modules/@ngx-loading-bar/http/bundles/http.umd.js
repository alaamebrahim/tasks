(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/http'), require('@ngx-loading-bar/core'), require('rxjs/operator/finally')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/http', '@ngx-loading-bar/core', 'rxjs/operator/finally'], factory) :
	(factory((global.http = {}),global.ng.core,global.ng.http,global['@ngx-loading-bar/core'],global.Rx.Observable.prototype));
}(this, (function (exports,core,http,core$1,_finally) { 'use strict';

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var LoadingBarHttp = /** @class */ (function (_super) {
    __extends(LoadingBarHttp, _super);
    /**
     * @param {?} _backend
     * @param {?} _defaultOptions
     * @param {?} loadingBar
     */
    function LoadingBarHttp(_backend, _defaultOptions, loadingBar) {
        var _this = _super.call(this, _backend, _defaultOptions) || this;
        _this.loadingBar = loadingBar;
        return _this;
    }
    /**
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    LoadingBarHttp.prototype.request = function (url, options) {
        var _this = this;
        var /** @type {?} */ headers = options && options.headers;
        if (!headers && url && ((url)).headers) {
            headers = ((url)).headers;
        }
        if (headers && headers.has('ignoreLoadingBar')) {
            headers.delete('ignoreLoadingBar');
            return _super.prototype.request.call(this, url, options);
        }
        var /** @type {?} */ response$ = _super.prototype.request.call(this, url, options);
        if (options && options.ignoreLoadingBar === true) {
            return response$;
        }
        var /** @type {?} */ started = false;
        var /** @type {?} */ responseSubscribe = response$.subscribe.bind(response$);
        response$.subscribe = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            _this.loadingBar.start();
            started = true;
            return responseSubscribe.apply(void 0, args);
        };
        return _finally._finally.call(response$, function () { return started && _this.loadingBar.complete(); });
    };
    return LoadingBarHttp;
}(http.Http));
LoadingBarHttp.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
LoadingBarHttp.ctorParameters = function () { return [
    { type: http.ConnectionBackend, },
    { type: http.RequestOptions, },
    { type: core$1.LoadingBarService, },
]; };
/**
 * @param {?} xhrBackend
 * @param {?} requestOptions
 * @param {?} loadingBarService
 * @return {?}
 */
function httpFactory(xhrBackend, requestOptions, loadingBarService) {
    return new LoadingBarHttp(xhrBackend, requestOptions, loadingBarService);
}
var LoadingBarHttpModule = /** @class */ (function () {
    function LoadingBarHttpModule() {
    }
    return LoadingBarHttpModule;
}());
LoadingBarHttpModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [
                    http.HttpModule,
                    core$1.LoadingBarModule.forRoot(),
                ],
                exports: [
                    http.HttpModule,
                    core$1.LoadingBarModule,
                ],
                providers: [
                    { provide: http.Http, useFactory: httpFactory, deps: [http.XHRBackend, http.RequestOptions, core$1.LoadingBarService] },
                ],
            },] },
];
/**
 * @nocollapse
 */
LoadingBarHttpModule.ctorParameters = function () { return []; };

exports.LoadingBarHttpModule = LoadingBarHttpModule;
exports.LoadingBarHttp = LoadingBarHttp;
exports.Éµa = httpFactory;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=http.umd.js.map
